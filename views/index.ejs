<!DOCTYPE html>
<html>

<head>
    <title>
        Intro to WebRTC
    </title>
    <link rel="stylesheet" type="text/css" href="styles.css">
    <script src="/socket.io/socket.io.js"></script>
    </link>

</head>

<body>
    <!-- <div>
        Video: <select id="camera"> </select>
    </div> -->

    <video id="myVideoTag" autoplay></video>
    <video id="theirVideoTag" autoplay></video>

    <div>
        <label> Your Name</label> <input id="myName" type="text" />
        <label> Message </label> <input id="myMessage" type="text" />
        <input type="submit" id="sendMessage" />
        <div id="chatArea">Message Output: </br> </div>
        <div id="signalingArea">SignalingMessage: </br> </div>
    </div>


    <script>
        const myvideoArea = document.querySelector("#myVideoTag");
        const theirvideoArea = document.querySelector("#theirVideoTag");
        const signalingArea = document.querySelector("#signalingArea");

        const myName = document.querySelector("#myName");
        const message = document.querySelector("#myMessage");
        const sendMessage = document.querySelector("#sendMessage");
        const chatArea = document.querySelector("#chatArea");
        const room = "chat";
        const signal_room = 'signal_room';
        const configeration = {
            iceServers: [{
                "url": 'stun:stun.l.google.com:19302'
            }]
        }
        let rtcPeerConection;
        io = io.connect();
        io.emit('ready', { "chat_room": room, "signal_room": signal_room });
        io.emit('signal', { "type": "user_here", "message": "Are you ready for call ?", "room": signal_room })

        io.on('announce', function (data) {
            displayMessage(data.message);
        })

        io.on('message', function (data) {
            displayMessage(`${data.author} : ${data.message}`);
        })

        io.on('signaling_message', function (data) {

            displaySignalMessage(`Signal Recieved : ${data.type}`);
            if (!rtcPeerConection) startSignaling()
        })

        sendMessage.addEventListener('click', function (e) {
            io.emit('send', { author: myName.value, message: message.value, room: room })
            e.preventDefault()
        }, false)

        function startSignaling() {
            displaySignalMessage("Start Signaling ....")
            rtcPeerConection = new webkitRTCPeerConnection(configeration);
            // send any ice candidate to other peer
            rtcPeerConection.onicecandidate = function (evt) {
                if (evt.candidate) {
                    io.emit('signal', { "type": "ice candidate", "message": JSON.stringify({ 'candidate': evt.candidate }), room: signal_room });
                    displaySignalMessage("completed that ice candidate...");
                }
            }
            rtcPeerConection.onnegotiationneeded = function () {
                displaySignalMessage("on negotiation called");
                rtcPeerConection.createOffer(sendLocalDescription, logError);

            }
            rtcPeerConection.onaddStream = function (evt) {
                displaySignalMessage("go to add their stream ...");
                theirvideoArea.src = URL.createObjectURL(evt.stream);

            }
            navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
            navigator.getUserMedia()

        }
        function sendLocalDescription(desc) {
            rtcPeerConection.setLocalDescription(desc, function () {
                displaySignalMessage("setting local description");
                io.emit('signal', { "type": "SDP", "message": JSON.stringify({ 'sdp': rtcPeerConection.localDescription, 'room': signal_room }) })
            }, logError)
        }

        function logError(error) {
            displaySignalMessage(`${error.name}:${error.message}`);
        }

        function displaySignalMessage(message) {
            signalingArea.innerHTML = signalingArea.innerHTML + `<br/> ${message}`;
        }

        function displayMessage(message) {
            chatArea.innerHTML = chatArea.innerHTML + `<br/> ${message}`;
        }



    </script>
</body>

</html>