<!DOCTYPE html>
<html>

<head>
    <title>
        Intro to WebRTC
    </title>
    <link rel="stylesheet" type="text/css" href="styles.css">
    <script src="/socket.io/socket.io.js"></script>
    </link>

</head>

<body>
    <div>
        Video: <select id="camera"> </select>
    </div>
    <p><button id="takeProfilePicture" type="button" autofocus="true">Create Profile Picture</button></p>
    <video id="videoTag" autoplay></video>
    <div>
        <label> Your Name</label> <input id="myName" type="text" />
        <label> Message </label> <input id="myMessage" type="text" />
        <input type="submit" id="sendMessage" />
        <div id="chatArea">Message Output: </br> </div>
    </div>


    <script>
        const videoArea = document.querySelector("#videoTag");
        const videoSelect = document.querySelector("#camera");
        const myName = document.querySelector("#myName");
        const message = document.querySelector("#myMessage");
        const sendMessage = document.querySelector("#sendMessage");
        const chatArea = document.querySelector("#chatArea");
        const room = "chat";
        videoSelect.onChange = startStream;
        startStream()

        io = io.connect();
        io.emit('ready', room);


        io.on('announce', function (data) {
            displayMessage(data.message);
        })

        io.on('message', function (data) {
            console.log("message", data)
            displayMessage(`${data.author} : ${data.message}`);
        })

        sendMessage.addEventListener('click', function (e) {
            console.log(e)
            io.emit('send', { author: myName.value, message: message.value, room: room })
            e.preventDefault()
        }, false)


        if (typeof navigator.mediaDevices != undefined || typeof navigator.mediaDevices.enumerateDevices != undefined) {
            navigator.mediaDevices.enumerateDevices().then((sourceInfos) => {
                for (let i = 0; i < sourceInfos.length; i++) {
                    let sourceInfo = sourceInfos[i];
                    let option = document.createElement("option");
                    option.value = sourceInfo.label;

                    if (sourceInfo.kind == 'videoinput') {
                        option.text = sourceInfo.label || 'camera ' + (videoSelect.length + 1);
                        videoSelect.appendChild(option);
                    }
                }

            })
        } else {
            videoSelect.style.visibility = 'hidden';
        }

        function displayMessage(message) {
            chatArea.innerHTML = chatArea.innerHTML + `<br/> ${message}`;
        }
        function startStream() {
            navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
            let videoSource = videoSelect.value;
            const contraints = {
                video: false,
                // video: {
                //     mandatory: {
                //         minWidth: 240, maxWidth: 240, minHeight: 240, maxHeight: 240
                //     }
                // },
                audio: true,
                optional: [{ sourceId: videoSource }]
            };
            navigator.getUserMedia(contraints, onSuccess, onError);
        }

        function onSuccess(stream) {
            videoArea.volume = 0;
            videoArea.muted = 0;
            videoArea.srcObject = stream;
            // videoArea.className = "greyscale_filter"
            videoArea.play();
        }

        function onError(error) {
            console.log("Error Ocuured While Playing the Video Content:", error);

        }

    </script>
</body>

</html>